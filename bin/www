#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '8000');
var port = '8000';
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,'192.168.160.74');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


function dateFormat(date, fmt) {
    if (null == date || undefined == date) return '';
    const newdate = new Date(date);    
    const mm = newdate.getMonth() + 1;
    const dd = newdate.getDate();
    const hh = newdate.getHours();
    const mi = newdate.getMinutes();
    const ss = newdate.getSeconds();

    if(hh == 0 && mi == 0 && ss == 0){
      return [newdate.getFullYear(), "-" +
          (mm > 9 ? '' : '0') + mm, "-" +
          (dd > 9 ? '' : '0') + dd
      ].join('')
    }else{
      return [newdate.getFullYear(), "-" +
          (mm > 9 ? '' : '0') + mm, "-" +
          (dd > 9 ? '' : '0') + dd, " " +
          (hh > 9 ? '' : '0') + hh, ":" +
          (mi > 9 ? '' : '0') + mi, ":" +
          (ss > 9 ? '' : '0') + ss
      ].join('')
    }
}

Date.prototype.toJSON = function () { return dateFormat(this,'yyyy-MM-dd')}